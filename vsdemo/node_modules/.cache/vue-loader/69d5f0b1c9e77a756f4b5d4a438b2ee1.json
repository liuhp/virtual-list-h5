{"remainingRequest":"/Users/liuhaiping17/Downloads/document/projects/morse/虚拟列表/虚拟滚动体验源代码/vsdemo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuhaiping17/Downloads/document/projects/morse/虚拟列表/虚拟滚动体验源代码/vsdemo/src/pages/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuhaiping17/Downloads/document/projects/morse/虚拟列表/虚拟滚动体验源代码/vsdemo/src/pages/index.vue","mtime":1646303456821},{"path":"/Users/liuhaiping17/Downloads/document/projects/morse/虚拟列表/虚拟滚动体验源代码/vsdemo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuhaiping17/Downloads/document/projects/morse/虚拟列表/虚拟滚动体验源代码/vsdemo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liuhaiping17/Downloads/document/projects/morse/虚拟列表/虚拟滚动体验源代码/vsdemo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuhaiping17/Downloads/document/projects/morse/虚拟列表/虚拟滚动体验源代码/vsdemo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport img0 from \"../assets/news/0.webp\";\r\nimport img1 from \"../assets/news/1.webp\";\r\nimport img2 from \"../assets/news/2.webp\";\r\nimport img3 from \"../assets/news/3.webp\";\r\nimport img4 from \"../assets/news/4.webp\";\r\nimport img5 from \"../assets/news/5.webp\";\r\nimport img6 from \"../assets/news/6.webp\";\r\nimport img7 from \"../assets/news/7.webp\";\r\nimport img8 from \"../assets/news/8.webp\";\r\nimport img9 from \"../assets/news/9.webp\";\r\nimport img10 from \"../assets/news/10.webp\";\r\nimport img11 from \"../assets/news/11.webp\";\r\nimport img12 from \"../assets/news/12.webp\";\r\nimport img13 from \"../assets/news/13.webp\";\r\nimport img14 from \"../assets/news/14.webp\";\r\nimport img15 from \"../assets/news/15.webp\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      //用来存放当前数据源的对象数组\r\n      listData: [],\r\n      //用来通知子组件内部的加载提示是否需要显示\r\n      ifRequest: true,\r\n      //用来进行相应提示的通知\r\n      msg: \"小二正在努力，请耐心等待...\",\r\n      // 图片数组\r\n      imgsList: [\r\n        img0,\r\n        img1,\r\n        img2,\r\n        img3,\r\n        img4,\r\n        img5,\r\n        img6,\r\n        img7,\r\n        img8,\r\n        img9,\r\n        img10,\r\n        img11,\r\n        img12,\r\n        img13,\r\n        img14,\r\n        img15,\r\n      ],\r\n    };\r\n  },\r\n  async mounted() {\r\n    // 分批发送请求时，先请求一部分数据保证数据显示\r\n    let request = await this.getMock(10);\r\n    if (!!request && request.length > 0) {\r\n      this.listData = [...request];\r\n    }\r\n  },\r\n  methods: {\r\n    // 发送请求获取新的请求模拟数据，这个是跨域请求的网络mock数据\r\n    getMock(num) {\r\n      this.msg = \"小二正在努力，请耐心等待...\";\r\n      this.ifRequest = true;\r\n      return this.$axios\r\n        .get(\"http://localhost:4000/data?num=\" + num)\r\n        .then((res) => {\r\n          this.ifRequest = false;\r\n          return res.data.list;\r\n        })\r\n        .catch(() => {\r\n          this.msg = \"亲，网络请求出错啦！赶快检查吧...\";\r\n          return false;\r\n        });\r\n    },\r\n    // 到达底部重新获取数据，触发这个事件是子组件下拉数据到底部以后再进行触发的\r\n    atBottom() {\r\n      this.moreRequest();\r\n    },\r\n    /**\r\n     * 用户下拉到底部后，再次发出批量数据请求信息，并将新得到的数据放到整个数据对象数组中以方便调用显示\r\n     * 这里将回调的纯函数进行了传递和调用，确保数据的顺利加载\r\n     * 同时，这里有一个非常重要的环节就是：如果我现在正在请求数据，那么用户在子组件中就算是再次触发下拉到底的操作也不会重复请求追加数据，这个是基于数据请求速度本身进行防抖设置的具有极大的优势\r\n     */\r\n    async moreRequest() {\r\n      //设置最多允许请求600条数据\r\n      if (this.listData.length >= 20000) {\r\n        this.ifRequest = true;\r\n        this.msg = \"亲，到底啦！我是有底线的！\";\r\n        return;\r\n      }\r\n      if (this.ifRequest) return;\r\n      this.ifRequest = true;\r\n      let result = await this.getMock(10000);\r\n      this.listData = [...this.listData, ...result];\r\n      this.ifRequest = false;\r\n    },\r\n  },\r\n};\r\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n  <div class=\"news-list\">\r\n    <!-- \r\n      调用封装的虚拟滚动及数据请求分割回调事件\r\n      对应的参数介绍：\r\n      listData ： 获取所有的相关数据源信息\r\n      height： 当前列栏目的定高\r\n      bufferSize ： 一次性需要渲染的对应条数\r\n      ifRequest ：当前是否处于数据请求状态，如果处于数据请求状态则在子组件中显示加载提示\r\n      msg : 用来进行相应提示的通知\r\n      @bottom ：当前子组件在下拉到底部的时候，触发数据请求相关事件\r\n      v-slot：作用域插槽，也叫带数据作用域的插槽，可以拿到子组件注入的对应数据进行响应\r\n    -->\r\n    <virtual-block\r\n      class=\"scroller\"\r\n      :allDataList=\"this.listData\"\r\n      :blockHeight=\"100\"\r\n      :bufferSize=\"5\"\r\n      :onRequesting=\"ifRequest\"\r\n      :msg=\"msg\"\r\n      @bottom=\"atBottom\"\r\n      v-slot:default=\"oneItem\"\r\n    >\r\n      <router-link\r\n        :to=\"{\r\n          path: '/article',\r\n          query: {\r\n            id: oneItem.thisItem.id,\r\n            date: oneItem.thisItem.date,\r\n            from: oneItem.thisItem.from,\r\n            reads: oneItem.thisItem.reads,\r\n            title: oneItem.thisItem.title,\r\n          },\r\n        }\"\r\n      >\r\n        <!-- 显示一条新闻 -->\r\n        <div class=\"one-new\">\r\n          <!-- 新闻左侧标题、评论、来源部分 -->\r\n          <div class=\"new-left\">\r\n            <h3>{{ oneItem.thisItem.title }}</h3>\r\n            <div>\r\n              <p>\r\n                <img src=\"../assets/icons/msg.png\" alt=\"评\" />\r\n                <span>{{ oneItem.thisItem.reads }}</span>\r\n                <span>{{ oneItem.thisItem.from }}</span>\r\n              </p>\r\n              <h4>{{ oneItem.thisItem.date }}</h4>\r\n            </div>\r\n          </div>\r\n          <!-- 新闻右侧图片部分 -->\r\n          <div class=\"new-right\">\r\n            <img :src=\"imgsList[oneItem.thisItem.image]\" alt=\"PIC\" />\r\n          </div>\r\n        </div>\r\n      </router-link>\r\n    </virtual-block>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport img0 from \"../assets/news/0.webp\";\r\nimport img1 from \"../assets/news/1.webp\";\r\nimport img2 from \"../assets/news/2.webp\";\r\nimport img3 from \"../assets/news/3.webp\";\r\nimport img4 from \"../assets/news/4.webp\";\r\nimport img5 from \"../assets/news/5.webp\";\r\nimport img6 from \"../assets/news/6.webp\";\r\nimport img7 from \"../assets/news/7.webp\";\r\nimport img8 from \"../assets/news/8.webp\";\r\nimport img9 from \"../assets/news/9.webp\";\r\nimport img10 from \"../assets/news/10.webp\";\r\nimport img11 from \"../assets/news/11.webp\";\r\nimport img12 from \"../assets/news/12.webp\";\r\nimport img13 from \"../assets/news/13.webp\";\r\nimport img14 from \"../assets/news/14.webp\";\r\nimport img15 from \"../assets/news/15.webp\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      //用来存放当前数据源的对象数组\r\n      listData: [],\r\n      //用来通知子组件内部的加载提示是否需要显示\r\n      ifRequest: true,\r\n      //用来进行相应提示的通知\r\n      msg: \"小二正在努力，请耐心等待...\",\r\n      // 图片数组\r\n      imgsList: [\r\n        img0,\r\n        img1,\r\n        img2,\r\n        img3,\r\n        img4,\r\n        img5,\r\n        img6,\r\n        img7,\r\n        img8,\r\n        img9,\r\n        img10,\r\n        img11,\r\n        img12,\r\n        img13,\r\n        img14,\r\n        img15,\r\n      ],\r\n    };\r\n  },\r\n  async mounted() {\r\n    // 分批发送请求时，先请求一部分数据保证数据显示\r\n    let request = await this.getMock(10);\r\n    if (!!request && request.length > 0) {\r\n      this.listData = [...request];\r\n    }\r\n  },\r\n  methods: {\r\n    // 发送请求获取新的请求模拟数据，这个是跨域请求的网络mock数据\r\n    getMock(num) {\r\n      this.msg = \"小二正在努力，请耐心等待...\";\r\n      this.ifRequest = true;\r\n      return this.$axios\r\n        .get(\"http://localhost:4000/data?num=\" + num)\r\n        .then((res) => {\r\n          this.ifRequest = false;\r\n          return res.data.list;\r\n        })\r\n        .catch(() => {\r\n          this.msg = \"亲，网络请求出错啦！赶快检查吧...\";\r\n          return false;\r\n        });\r\n    },\r\n    // 到达底部重新获取数据，触发这个事件是子组件下拉数据到底部以后再进行触发的\r\n    atBottom() {\r\n      this.moreRequest();\r\n    },\r\n    /**\r\n     * 用户下拉到底部后，再次发出批量数据请求信息，并将新得到的数据放到整个数据对象数组中以方便调用显示\r\n     * 这里将回调的纯函数进行了传递和调用，确保数据的顺利加载\r\n     * 同时，这里有一个非常重要的环节就是：如果我现在正在请求数据，那么用户在子组件中就算是再次触发下拉到底的操作也不会重复请求追加数据，这个是基于数据请求速度本身进行防抖设置的具有极大的优势\r\n     */\r\n    async moreRequest() {\r\n      //设置最多允许请求600条数据\r\n      if (this.listData.length >= 20000) {\r\n        this.ifRequest = true;\r\n        this.msg = \"亲，到底啦！我是有底线的！\";\r\n        return;\r\n      }\r\n      if (this.ifRequest) return;\r\n      this.ifRequest = true;\r\n      let result = await this.getMock(10000);\r\n      this.listData = [...this.listData, ...result];\r\n      this.ifRequest = false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.news-list {\r\n  width: 100%;\r\n  max-width: 800px;\r\n  height: 100%;\r\n  a {\r\n    display: block;\r\n    width: 100%;\r\n    text-decoration: none;\r\n  }\r\n  .one-new {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid #ddd;\r\n    padding: 14px 10px 5px;\r\n    .new-left {\r\n      height: 80px;\r\n      position: relative;\r\n      h3 {\r\n        padding: 0;\r\n        margin: 0;\r\n        font-size: 16px;\r\n        text-align: justify;\r\n        color: #555;\r\n      }\r\n      div {\r\n        position: absolute;\r\n        width: 100%;\r\n        bottom: 10px;\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: nowrap;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        p {\r\n          display: flex;\r\n          flex-direction: row;\r\n          flex-wrap: nowrap;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          img {\r\n            height: 16px;\r\n          }\r\n          span {\r\n            font-size: 12px;\r\n            color: #555;\r\n            margin-left: 3px;\r\n            margin-right: 3px;\r\n          }\r\n        }\r\n        h4 {\r\n          font-size: 12px;\r\n          color: #888;\r\n        }\r\n      }\r\n    }\r\n    .new-right {\r\n      margin-left: 10px;\r\n      img {\r\n        height: 68px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}